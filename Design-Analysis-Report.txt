// the 1500 word part of the assignment. to be exported as pdf and included in the final submission

Design Criticisms:


Polymoprhism:
Reduced reuse of code
Lower representation gap
Classses are in charge of specific creation

1. In the provided package, Robot differentiates between different types of robots with the strong attribute. While it works reasonably well for a system with two robot types, it makes extension and modification of types of robots difficult. We proprosed using polymorphism, creating the classes RobotBig, RobotWeak and RobotStrong which inherit robot. This reduces complexity and reuse of code, allowing simpler comparisons through comparing class types, which scales much better with additioinal types of robots. Also leads to better delegation, where subclasses are in charge of their own creation, containing information such as the strength of the robot and tube size for robot creation. Furthermore, this alternative allows for the addition of another robot type to be simpler and would follow the open-closed principle. For example, if we were to add a new type of robot, a weak robot that can carry 6 items, the suggested system would be closed to modifications, requiring no changes to robot, and open to extension, creating a new subclass of robot to implement the new requirements.


2. MailGenerator contains a pointer to MailPool, which reduces cohesion and increases the representational gap for how the system 
should intuitively work. MailGenerator should intuitively do one thing: generate mail. The provided package requires simulation to 
call a method in MailGenerator to directly add the mail to MailPool and call the AddToPool method. This reduces cohesion because it 
gives MailGenerator a responsibility it should not. Our solution to this is to de-couple MailGenerator and MailPool so that 
MailGenerator only generates a HashMap of mail. Our system then employs the Simulation class  to provide indirection by generating 
the time ordered mail set from MailGenerator and adding mail to MailPool Automail. This system reduces coupling because and allows 
for greater potnetial extendibility; for instance if we wanted a variable number of MailGenerators and MailPools we could do so.


3. In the existing package, Simulation directly notifies each inidividual robot of a new priority arrival. This is poor cohesion 
for the following reasons: Simulation should be about stepping the main system components through in time order fashion and 
recording the results. Each robot is a member of an Automail System which has robots and a mail-pool, and it is the responsibility 
of the mail pool to notify robots of new arrivals, fill their storage tubes etc. It also has high coupling because it means if we 
want to add more robots we need to update the simulation code. Our solution fixes this by using a function within Automail which 
notifies all robots of priority arriavls, regardless of how many there are. We decided to put this function in Automail, because 
Automail is the system which agregates robots and the MailPool. Therefore simulation only calls one function, addIncomingMail, and 
autommail notifies robots of priority items and adds mail to mailPool.

4. 











-----------------------------------------------------------
other changes that were made:

(copypasted from raymond_branch_changes)

log of most changes made in raymond branch that were merged to master

Created a PropertiesLoader class. Since variables are private and there are only getters, it is immutable and since everything is static it can be acccessed everywhere without instantiation. 
Replaced previous instances of variables with corresponding PropertiesLoader.get...() methods.

Removed whatever method arguments that are given by Properties as they can be accessed directly now. Removing arguments is decreasing coupling between method caller and method executer. But, executer now is coupled with propertiesloader class since they depend on it having the variable needed.

mailgenerator now longer has any arguments. It gets mail to create and seed from PropertiesLoader and instead of inputting mailitems directly to a mailpool it returns mail for the current clock time in getMail(). This has reduced its coupling with simulation since it doesnt rely on args from it anymore. Furthermore it does not need to store a mailpool as an attribute. Increased coupling with PropertiesLoader, but the alternative of putting propertiesloader through simulation into mailgen gives simulation information it doesnt need to use.

made a step() function in automail so that simulation doesnt have to access automail.robot.step(), not is just automail.step(). simulation should not have knowledge of the inner workings of its associations, because otherwise they become highly coupled and difficult to use in isolation. Now if automail decides to store robots differently (we changed robot1 robot2 atributes to robot arraylist attribute), simulation doesnt need to know as we can modify the step() function in automail to absorb the change. 

ReportDelivery static class in simulation removed, now is static method instead. Reduces arguments passed into automail into robot. Locks us into having one simulation running at a time only but this should be acceptable as reading from the properties file does not support multiple simulations anyway. Removal of interface reduces protection against variation but its minor because the simulation class should be stable compared to strategies where most of the changes are expected to take place. (since the whole system is a simulation for testing various strategies)

Removed variable "complete" (finished creating mail flag) in MailGenerator, adjusted other parts appropriately. 

Replaced hashmap seed with int value only. Seed existence can be chacked against null, no need for such a data structure.

Renamed "strong" variable to "isStrong" in Robot for readability



